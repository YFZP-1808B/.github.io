{"version":3,"sources":["Login/register.jsx","Login/login.jsx","components/Layout/index.jsx","components/componentType/index.jsx","components/Install/index.jsx","components/Cass-Z/index.jsx","components/LifeCycle-Z/index.jsx","components/PropsContent-Z/index.jsx","components/Classdiff/Classdiff.jsx","components/Questionnaire/index.jsx","components/home.jsx","Login/index.jsx","serviceWorker.js","index.js"],"names":["myState","username","password","Register","reSetFrom","setState","handChange","target","name","value","register","state","trim","axios","get","then","res","status","sessionStorage","setItem","JSON","stringify","props","getstatus","data","typename","alert","this","onReset","autoComplete","className","type","onChange","placeholder","onClick","Component","Login","handleChange","onSubmit","login","userInfo","parse","getItem","user","Header","Layout","Sider","Content","leftNav","iconType","text","id","Mylayout","toggle","collapsed","trigger","collapsible","theme","mode","defaultSelectedKeys","map","item","Item","key","getsoudata","style","background","padding","margin","minHeight","children","React","title","label","span","size","header","bordered","dataSource","renderItem","footer","selest","checkbox","radio","textarea","sex","hobby","Index","handonSubmit","event","preventDefault","console","log","querySelectorAll","fn","textAlign","fontSize","color","newCheckbox","checked","ooo","e","getAttribute","eee","call","Home","getSouData","window","location","hash","isCom","slice","onhashchange","Dom","Install","Classdiff","Fragment","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1611090.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './style/index.scss';\r\nconst myState = {\r\n  username: '',\r\n  password: ''\r\n};\r\nexport default class Register extends Component {\r\n  //重置表单事件\r\n  reSetFrom = () => {\r\n    this.setState(myState);\r\n  };\r\n  //改变state的值\r\n  handChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = myState;\r\n  }\r\n  //渲染函数\r\n  render() {\r\n    const { username, password } = this.state;\r\n    return (\r\n      <form onReset={this.reSetFrom} \r\n      autoComplete=\"off\" \r\n       className=\"ysb-form-001\">\r\n        <label>\r\n         <span className=\"ysb-span-001\"> 用户名：</span>\r\n          <input\r\n          className=\"ysb-input-001\"\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={this.handChange}\r\n            name=\"username\"\r\n            placeholder=\"请输入您的用户名\"\r\n          />\r\n        </label>\r\n        <label>\r\n      <span className=\"ysb-span-001\">密码框：</span>    \r\n          <input\r\n           className=\"ysb-input-002\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={this.handChange}\r\n            name=\"password\"\r\n            placeholder=\"请输入您的密码\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <button\r\n           type=\"reset\"\r\n           className=\"ysb-btn-001\"\r\n          >重置</button>\r\n          <button type=\"button\" onClick={this.register}   className=\"ysb-btn-002\">\r\n            注册\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n  register = () => {\r\n    //1.前端验证，验证通过以后\r\n    const { username, password } = this.state;\r\n    if (!username.trim()) {\r\n      return alert('用户名不能为空');\r\n    } else if (!password.trim()) {\r\n      return alert('密码不能为空');\r\n    }\r\n    //2.调用接口，接口饭hi的数据村到全局里面\r\n    //凡是实际到用户数据信息的，在接口中一定是用post请求方式\r\n    axios.get('/api/register.json', { username, password }).then(res => {\r\n      if (res.status === 200) {\r\n        //将账号密码存到本地一份【注意：在真是的项目里，不能这样做，仅适用于测试本地开发】\r\n        sessionStorage.setItem(\r\n          'userRegister',\r\n          JSON.stringify({ username, password })\r\n        );\r\n        // 3.控制跳转到登陆页面\r\n        this.props.getstatus({ ...res.data, typename: 'Login' });\r\n      } else {\r\n        alert('网络错误，稍后重试');\r\n      }\r\n    });\r\n  };\r\n}\r\n// getItem 是获取\r\n//setItem 是设置\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './style/index.scss'\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.userInfo = JSON.parse(sessionStorage.getItem('userRegister'));\r\n    this.state = {\r\n      username: (this.user && this.user.name) || '',\r\n      password: ''\r\n    };\r\n  }\r\n  //改变input值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  //提交\r\n  onSubmit = () => {\r\n    const { username, password } = this.state;\r\n    //1.前端验证\r\n    if (!username.trim()) {\r\n      return alert('用户名不能为空');\r\n    } else if (!password.trim()) {\r\n      return alert('密码不能为空');\r\n    }\r\n    //2.走接口\r\n    axios\r\n      .get('/api/register.json', {\r\n        username,\r\n        password\r\n      })\r\n      .then(res => {\r\n        //3.本地测试：前端需要做后端接口的逻辑对比，一般是后端来做测试\r\n        //假设：这里的数据就是接口获取的\r\n        const login = { username, password };\r\n        //假设：这里的数据是从数据库读出来的\r\n        const userInfo = this.userInfo;\r\n        //使用接口的数据跟数据库的数据对比，如果一致，说明登陆成功\r\n        if (!userInfo) {\r\n          return alert('该账号不存在，请理解注册');\r\n        } else if (userInfo.username !== login.username) {\r\n          return alert('用户名不对');\r\n        } else if (userInfo.password !== login.password) {\r\n          return alert('密码错误');\r\n        }\r\n        axios.get('/api/login.json', { username, password }).then(res => {\r\n          if (res.status === 200) {\r\n            sessionStorage.setItem(\r\n              'userLogin',\r\n              JSON.stringify({ username, password })\r\n            );\r\n            this.props.getstatus({ ...res.data, typename: 'Home' });\r\n          } else {\r\n            alert('网络出错，稍后重试');\r\n          }\r\n        });\r\n      });\r\n  };\r\n  render() {\r\n    const { username, password } = this.state;\r\n    return (\r\n      <form className=\"ysb-form-002\">\r\n        <label >\r\n          <input\r\n            autoComplete=\"off\"\r\n            type=\"text\"\r\n            name=\"username\"\r\n            value={username}\r\n            onChange={this.handleChange}\r\n            placeholder=\"用户名\"\r\n             className=\"ysb-input-003\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <input\r\n            autoComplete=\"off\"\r\n            type=\"password\"\r\n            value={password}\r\n            name=\"password\"\r\n            onChange={this.handleChange}\r\n            placeholder=\"密码\"\r\n            className=\"ysb-input-004\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <button type=\"button\" \r\n          onClick={this.onSubmit}\r\n          className=\"ysb-login\"\r\n          >\r\n          \r\n           Login...\r\n          </button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\nconst { Header, Sider, Content } = Layout;\r\n// 左侧一级导航的数据\r\nconst leftNav = [\r\n  { iconType: 'video-camera', text: '受控组件和非受控组价', id: 'ComponentType' },\r\n  { iconType: 'video-camera', text: '条件渲染', id: 'Install' },\r\n  { iconType: 'read', text: '表单的使用', id: 'Cass' },\r\n  { iconType: 'save', text: '边界错误', id: 'LifeCycle' },\r\n  { iconType: 'switcher', text: 'React中的列表和diff', id: 'PropsContent' },\r\n  { iconType: \"video-camera\", text: \"event事件对象\", id: \"Classdiff\" },\r\n  { iconType: \"video-camera\", text: \"调查问卷\", id: \"Questionnaire\" }\r\n];\r\nexport default class Mylayout extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // 控制展开收起\r\n      collapsed: false\r\n    };\r\n  }\r\n  // 切换的方法\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n\r\n  render() {\r\n    /*\r\n    Layout:容器组件，包裹组件\r\n    Sider：侧边栏，放导航的\r\n    Header：头部组件\r\n    Menu：做折叠导航的组件\r\n    Content：内容展示组件【重要】\r\n    */\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            {leftNav.map(item => {\r\n              return (\r\n                <Menu.Item\r\n                  key={item.id}\r\n                  onClick={() => {\r\n                    this.props.getsoudata(item.id);\r\n                  }}\r\n                >\r\n                  <Icon type={item.iconType} />\r\n                  <span>{item.text}</span>\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {/* 隐式渲染传递进来的组件 */}\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Descriptions } from 'antd';\r\n\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"受控组件和非受控组件\">\r\n     <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>受控组件</h2>\r\n          <div>\r\n          如果一个 input 表单元素的值是有 React 控制，就会成为受控组件。\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2>非受控组件 </h2>\r\n          <div>非受控意味着我可以不需要设置它的state属性，而通过ref来操作真实的DOM。</div>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n  </Descriptions>\r\n  );\r\n};","import React from \"react\";\r\n// 引入描述列表组件\r\nimport {Descriptions} from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"条件渲染的几种方式：\">\r\n      <Descriptions.Item key=\"1\" span={3}>\r\n        <ul>\r\n          <ol> 1、if </ol>\r\n          <ol>2、switch</ol>\r\n          <ol>3、||</ol>\r\n          <ol>4、&&</ol>\r\n          <ol>5、！</ol>\r\n          <ol>6、 三目运算符</ol>\r\n        </ul>\r\n        <h2>三目写法和&&的对比：</h2>\r\n        <p> 1.三目还是if的执行逻辑.及只要有一个条件成立，则后面的不再判断</p>\r\n       \r\n        <p>\r\n          <span>缺点：</span>{\" \"}\r\n          三目的语法不利于阅读，代码过长，还必须有一个没用的else\r\n        </p>\r\n        <p>\r\n          2.&&. 在代码阅读起来直观，但是，每一行都会进行比较，造成了不必要的浪费\r\n        </p>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { List} from 'antd';\r\n\r\nconst data = [\r\n    ' 2.合理地使用表单元素：使用label去包裹input及其它表单的元素',\r\n    '3.在from表单里button按钮类型必须指定，否则会触发表单的默认事件',\r\n    ' 4.具体使用：',\r\n    '④.①：使用input的时候需要添加name属性，该属性是react内置的，添加其它自定义属性无效：name的值一定是和该input绑定的value变量名一致',\r\n    '④.②：修改值的时候，使用元素的name属性去做键名',\r\n  ];\r\nexport default props => {\r\n  return (\r\n   <div>\r\n        <h2 style={{ margin: '16px 0' }}>表单的使用：</h2>\r\n    <List\r\n      size=\"large\"\r\n      header={<div>\r\n          <h2>1.表单里的元素：</h2>\r\n          <ul>\r\n              <li>1、input</li>\r\n              <li>2、textarea</li>\r\n              <li>3、select>option</li>\r\n              <li>4、button</li>\r\n              <li>5、label</li>\r\n          </ul>\r\n      </div>}\r\n      \r\n      bordered\r\n      dataSource={data}\r\n      renderItem={item => <List.Item>{item}</List.Item>}\r\n    />\r\n   </div>\r\n  );\r\n};\r\n ","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"边界错误\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>定义：</h2>\r\n          <div>\r\n          使用私有钩子函数，捕获子组件的错误，并且优雅的使用备用ui来替代错误提示。\r\n   凡是导致页面无法渲染的错误\r\n          </div>\r\n        </div>\r\n        <div className=\"careful\">\r\n          <h2>注意：</h2>\r\n<h3>错误边界无法捕获以下场景中产生的错误：</h3>\r\n          <div>\r\n            <ul>\r\n              <li>1.接口错误</li>\r\n              <li>2.事件里的错误</li>\r\n              <li>3.服务端错误</li>\r\n              <li>4.非子组件的错误</li>\r\n            </ul>\r\n            </div>\r\n        </div>\r\n        <div>\r\n          <h2> 使用：</h2>\r\n          <div> 在本地开发环境中,还是会有错误提示的，但是打包代码上线后，给用户展示的就不会再有错误提示了。</div>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {Descriptions} from \"antd\";\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"列表和diff\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <ul>\r\n          <li> 1、key 概念利用 diff 算法</li>\r\n          <li>2、元素的 key 只有在它和它的兄弟节点对比时才有意义。</li>\r\n          <li>3、 上下文对象是 this(一个空间的作用域)</li>\r\n        </ul>\r\n\r\n        <div className=\"box\">\r\n          <h4> key:为的是给diff算法进行优化，降低js执行次数，优化渲染。</h4>\r\n         <h4>key必须在数组上下文环境的兄弟元素之间添加，并且每一个key都是唯一的【不能重复】</h4>\r\n          <h4>key:在循环体或数组环境中.万不得已时使用index【下标】.一般在项目开发中，我们使用id</h4>\r\n          <h3>\r\n          diff算法：计算虚拟dom的算法:\r\n  其执行原理是: 同级对比,层层匹配，发现不一致时直接用新的替换旧的\r\n          </h3>\r\n          \r\n        </div>\r\n        <div className=\"box-bottom\">\r\n        <h2>注意：</h2>\r\n        <h3>1、最好不用index下标 因为index是可变的不确定的当数据增加或删除时 一旦发生改变 索引会重新排列 重新渲染 没有起到diff算法优化性能的作用</h3>\r\n        <h3>2、key不要用时间戳 和 随机数 因为它在每次都在改变每次都要重新排列 </h3>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport { List, Typography } from 'antd';\r\n\r\nconst data = [\r\n \r\n  '1、event.target:被触发的具体的元素.这个是不确定的',\r\n  '2、event.currentTarget:事件被绑定到的具体元素',\r\n  '3、event.nativeEvent:原生事件对象',\r\n  '4、event.preventDefault() 清除默认事件',\r\n  '5、event.stopPropagation() 清除冒泡    清除冒泡写在要清除的子级上,因为冒泡是从内向外的(从子向父) ',\r\n];\r\n\r\nexport default props =>{\r\n  return(\r\n    <div>\r\n       <h3 style={{ margin: '16px 0' }}>event事件对象</h3>\r\n  <List\r\n    size=\"small\"\r\n    header={<div>\r\n      <b>event：事件对象--- react中叫做合成的事件对象【react封装的事件对象】</b>\r\n      <h1 className=\"top\"> <b>event事件对象包含的通用属性:</b> </h1>\r\n    </div>}\r\n    footer={<div>\r\n      <h2>event.persist()</h2>\r\n       <h3>event.persist()将event对象的属性值强制保留</h3>\r\n    <h1>解决的问题：</h1>\r\n    event对象在异步方法里丢失属性值的问题。\r\n    </div>}\r\n    bordered\r\n    dataSource={data}\r\n    renderItem={item => <List.Item>{item}</List.Item>}\r\n  />\r\n    </div>\r\n    \r\n  )\r\n \r\n}","import React, { Component } from 'react';\r\nimport './index.scss';\r\nconst myState = {\r\n  text: '',\r\n  password: '',\r\n  selest: '',\r\n  checkbox: [false, false],\r\n  radio: '1',\r\n  textarea: '',\r\n  sex:'',\r\n  hobby:''\r\n};\r\n\r\nexport default class Index extends Component {\r\n\r\n    \r\n  //表单提交事件\r\n  handonSubmit = event => {\r\n    const { target } = event;\r\n    event.preventDefault(); //取消默认事件s\r\n    console.log(target.querySelectorAll('input[name=text]')[0].value);\r\n  };\r\n\r\n  fn=()=>{\r\n    return (\r\n            <div>\r\n                <p style={{textAlign:'center',fontSize:'20px' ,color:'white'}}>这是你的个人资料</p>\r\n                <br/>\r\n                姓名:{this.state.text}<br/>\r\n                身高：{this.state.password}<br/>\r\n                性别：{this.state.sex}<br/>\r\n                个人爱好：{this.state.hobby}<br/>\r\n                所在城市：{this.state.selest}<br/>\r\n                个人简介{this.state.textarea}<br/>\r\n            </div>\r\n            )\r\n}\r\n\r\n\r\n  //重置表单事件\r\n  reSetFrom = () => {\r\n    // console.log(myState);\r\n    this.setState(myState);\r\n  };\r\n  //改变state的值\r\n  handChange = ({ target }) => {\r\n    if (target.name === 'checkbox') {\r\n      const newCheckbox = [...this.state.checkbox];\r\n      newCheckbox[target.value] = target.checked;\r\n      console.log(([...this.state.checkbox][target.value] = target.checked));\r\n      return this.setState({\r\n        [target.name]: newCheckbox\r\n      });\r\n    }\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = myState;\r\n  }\r\n  ooo=(e)=>{\r\n      console.log(e.target.getAttribute('sex'))\r\n      this.setState({\r\n          sex:e.target.getAttribute('sex')\r\n      })\r\n  }\r\n  eee=(e)=>{\r\n    console.log(e.target.getAttribute('hobby'))\r\n    this.setState({\r\n        hobby:e.target.getAttribute('hobby')\r\n    })\r\n}\r\n  //渲染函数\r\n  render() {\r\n    const { text, password, selest, checkbox, radio, textarea } = this.state;\r\n    return (\r\n        <div className='t-box'>\r\n        <form\r\n        onSubmit={this.handonSubmit}\r\n        onReset={this.reSetFrom}\r\n        autoComplete=\"off\">\r\n        <label>\r\n          用户名：\r\n          <input  type=\"text\" value={text}  onChange={this.handChange}  name=\"text\" className='shuru'/>\r\n        </label>\r\n        <label>\r\n          身高：\r\n          <input type=\"text\" value={password} onChange={this.handChange} name=\"password\" className='shuru'/>\r\n        </label>\r\n        <label>\r\n          所在城市：\r\n          <select name=\"selest\"  onChange={this.handChange}>\r\n            <option value=\"北京\">北京</option>\r\n            <option value=\"安徽\">安徽</option>\r\n            <option value=\"河北\">河北</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          个人爱好：\r\n         足球：<input type=\"checkbox\" checked={checkbox[0]} value=\"0\" name=\"checkbox\" hobby='足球'onClick={this.eee}   onChange={this.handChange}/>\r\n         篮球： <input type=\"checkbox\"  checked={checkbox[1]} value=\"1\" name=\"checkbox\" hobby='篮球'onClick={this.eee}  onChange={this.handChange}/>\r\n        </label>\r\n        <label>\r\n          性别：\r\n\r\n         男 <input type=\"radio\" name=\"radio\" checked={radio === '1'} value=\"1\" sex='男' onClick={this.ooo} onChange={this.handChange}/>\r\n          女<input type=\"radio\" name=\"radio\" checked={radio === '2'} value=\"2\" sex='女' onClick={this.ooo} onChange={this.handChange}/>\r\n        </label>\r\n        <label>\r\n          个人简介：\r\n          <textarea name=\"textarea\" value={textarea} onChange={this.handChange}></textarea>\r\n        </label>\r\n        <label>\r\n          <button type=\"button\" onClick={this.register}>\r\n            提交\r\n          </button>\r\n          {/* <button type=\"submit\">表单提交</button> */}\r\n          <button type=\"reset\">重新输入</button>\r\n        </label>\r\n      </form>\r\n      {this.fn.call(this)}\r\n      </div>\r\n    );\r\n  }\r\n  register = () => {\r\n    //前端验证，验证通过以后\r\n    // 2.调用接口，接口返回的数据存到全局里面\r\n    // 3.控制跳转到登陆页面\r\n          console.log(this.state.selest)\r\n          console.log(this.state.text)\r\n          console.log(this.state.password)\r\n          console.log(this.state.checkbox)\r\n          console.log(this.state.textarea)\r\n          console.log(this.state.sex)\r\n           // 1.前端验证，验证通过以后\r\n    const { text, password } = this.state\r\n    if (!text) {\r\n      return alert('姓名不能为空')\r\n    } else if (!password) {\r\n      return alert('身高不能为空')\r\n    }\r\n    \r\n  };\r\n}\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport Mylayout from \"./Layout/index\";\r\n\r\n//受控组件和非受控组价\r\nimport ComponentType from \"./componentType/index\";\r\n//条件渲染\r\nimport Install from \"./Install/index\";\r\n//表单的使用\r\nimport Cass from \"./Cass-Z/index\";\r\n//边界错误\r\nimport LifeCycle from \"./LifeCycle-Z\";\r\n//React中的列表和diff\r\nimport PropsContent   from \"./PropsContent-Z/index\";\r\n//event事件对象\r\nimport Classdiff from \"./Classdiff/Classdiff\";\r\n//调查问卷\r\nimport Questionnaire from \"./Questionnaire/index\"\r\n\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'componentType'\r\n    };\r\n\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n  // 收听子组件传递数据\r\n  getSouData = id => {\r\n    window.location.hash = id;\r\n  };\r\n  // 渲染函数\r\n  render() {\r\n    let Dom = \"\";\r\n    switch (this.state.isCom) {\r\n      case \"ComponentType\":\r\n        Dom = <ComponentType />;\r\n        break;\r\n      case \"Install\":\r\n        Dom = <Install />;\r\n        break;\r\n      case \"Cass\":\r\n        Dom = <Cass />;\r\n        break;\r\n      case \"LifeCycle\":\r\n        Dom = <LifeCycle />;\r\n        break;\r\n      case \"Classdiff\":\r\n        Dom = <Classdiff />;\r\n        break;\r\n      case \"PropsContent\":\r\n        Dom = <PropsContent />;\r\n        break;\r\n        case \"Questionnaire\":\r\n        Dom = <Questionnaire/>;\r\n        break;\r\n\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Mylayout getsoudata={this.getSouData}>\r\n          {\r\n            Dom\r\n            // this.state.isCom === 'ReactBase' ? <ReactBase/> :\r\n            // this.state.isCom === 'ComponentType' ? <ComponentType/>\r\n          }\r\n        </Mylayout>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Register from './register';\r\nimport Login from './login';\r\nimport Home from '../components/home';\r\n\r\nclass Index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: 'Register'\r\n    };\r\n  }\r\n  //获取饭hi组件的状态\r\n  getstatus = data => {\r\n    this.setState({\r\n      isCom: data.typename\r\n    });\r\n  };\r\n  render() {\r\n    let Dom = '';\r\n    switch (this.state.isCom) {\r\n      case 'Register':\r\n        Dom = <Register getstatus={this.getstatus} />;\r\n        break;\r\n      case 'Login':\r\n        Dom = <Login getstatus={this.getstatus} />;\r\n        break;\r\n      case 'Home':\r\n        Dom = <Home />;\r\n        break;\r\n    }\r\n    return <div>{Dom}</div>;\r\n  }\r\n}\r\nexport default Index","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// 引入核心依赖库React\nimport React from \"react\";\n// 引入核心依赖ReactDOM他是基于react的所以必须在react依赖的下面引入\nimport ReactDOM from \"react-dom\";\n// 自己写的全局样式\nimport \"./asets/index.css\";\n// 引入antd样式\nimport \"antd/dist/antd.css\";\n// 引入一个组件\nimport App from './Login/index';\n// 引入离线缓存代码\nimport * as serviceWorker from \"./serviceWorker\";\n// 使用ReactDOM渲染组件并挂载到根元素上\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// 离线缓存\nserviceWorker.unregister();\n"],"sourceRoot":""}