{"version":3,"sources":["components/Layout/index.jsx","components/ReacrtBase/index.jsx","components/componentType/index.jsx","components/Install/index.jsx","components/Cass-Z/index.jsx","components/LifeCycle-Z/index.jsx","components/Classdiff/Classdiff.jsx","components/Rendering/Rendering.jsx","components/Toplevelapi/Toplevelapi.jsx","components/PropsContent-Z/index.jsx","components/blog/index.jsx","components/route/index.jsx","components/frame/frames.jsx","components/index.jsx","serviceWorker.js","index.js"],"names":["Header","Layout","Sider","Content","leftNav","iconType","text","id","Mylayout","toggle","setState","collapsed","state","trigger","collapsible","this","className","theme","mode","defaultSelectedKeys","map","item","Item","key","onClick","props","getsoudata","type","style","background","padding","margin","minHeight","children","React","Component","gutter","data","reactBase","index","span","title","bordered","content","label","color","size","header","dataSource","renderItem","Index","getSouData","window","location","hash","isCom","slice","onhashchange","Dom","Install","Classdiff","Toplevelapi","Rendering","Fragment","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6iBAEQA,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAEjBC,EAAU,CACd,CAAEC,SAAU,WAAYC,KAAM,oBAAWC,GAAI,aAC7C,CAAEF,SAAU,eAAgBC,KAAM,2BAAQC,GAAI,iBAC9C,CAAEF,SAAU,eAAgBC,KAAM,6CAAWC,GAAI,WACjD,CAAEF,SAAU,OAAQC,KAAM,mBAAUC,GAAI,QACxC,CAAEF,SAAU,OAAQC,KAAM,2BAAQC,GAAI,aACtC,CAAEF,SAAU,WAAYC,KAAM,oBAAWC,GAAI,gBAC7C,CAAEF,SAAU,eAAgBC,KAAM,2BAAQC,GAAI,aAC9C,CAAEF,SAAU,eAAgBC,KAAM,kBAASC,GAAI,eAC/C,CAAEF,SAAU,eAAgBC,KAAM,2BAAQC,GAAI,aAC9C,CAAEF,SAAU,OAAQC,KAAM,yDAAaC,GAAI,QAC3C,CAAEF,SAAU,eAAgBC,KAAM,gBAAiBC,GAAI,SACvD,CAAEF,SAAU,OAAQC,KAAM,mBAAUC,GAAI,UAErBC,E,YACnB,aAAe,IAAD,8BACZ,+CAOFC,OAAS,WACP,EAAKC,SAAS,CACZC,WAAY,EAAKC,MAAMD,aARzB,EAAKC,MAAQ,CAEXD,WAAW,GAJD,E,sEAcJ,IAAD,OAQP,OACE,kBAAC,IAAD,KACE,kBAACT,EAAD,CAAOW,QAAS,KAAMC,aAAW,EAACH,UAAWI,KAAKH,MAAMD,WACtD,yBAAKK,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACpDf,EAAQgB,IAAI,SAAAC,GACX,OACE,kBAAC,IAAKC,KAAN,CACEC,IAAKF,EAAKd,GACViB,QAAS,WACP,EAAKC,MAAMC,WAAWL,EAAKd,MAG7B,kBAAC,IAAD,CAAMoB,KAAMN,EAAKhB,WACjB,8BAAOgB,EAAKf,WAMtB,kBAAC,IAAD,KACE,kBAACN,EAAD,CAAQ4B,MAAO,CAAEC,WAAY,OAAQC,QAAS,IAC5C,kBAAC,IAAD,CACEd,UAAU,UACVW,KAAMZ,KAAKH,MAAMD,UAAY,cAAgB,YAC7Ca,QAAST,KAAKN,UAGlB,kBAACN,EAAD,CACEyB,MAAO,CACLG,OAAQ,YACRD,QAAS,GACTD,WAAY,OACZG,UAAW,MAIZjB,KAAKU,MAAMQ,gB,GA5DcC,IAAMC,W,kCCd7B,WAAAV,GACb,OACE,6BACE,kBAAC,IAAD,CAAKW,OAAQ,IACVC,EAAKC,UAAUlB,IAAI,SAACC,EAAMkB,GACzB,OACE,kBAAC,IAAD,CAAKC,KAAM,EAAGjB,IAAKgB,GACjB,kBAAC,IAAD,CAAME,MAAOpB,EAAKoB,MAAOC,UAAU,GAChCrB,EAAKsB,e,SCTP,WAAAlB,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,4BAClB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,iCAAQrB,IAAI,IAAIiB,KAAM,GAC7C,6LACA,uEACA,yJACA,8JAEF,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,oBAAUrB,IAAI,IAAIiB,KAAM,GACjD,qJACE,kGACA,iIACA,mJAEF,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,2BAAOrB,IAAI,IAAIiB,KAAM,GAC9C,wOACE,4JACA,2GClBO,WAAAf,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,oDAClB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,eAAKrB,IAAI,IAAIiB,KAAM,GAC1C,wFACA,6FACA,kRAIA,6FACA,6NAGA,sZAGA,+MCjBO,WAAAf,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,oBAClB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,GAAGrB,IAAI,IAAIiB,KAAM,GACxC,6BACE,2FACA,8EAEF,6BACE,4EACA,kJAEF,6BACE,2QAGA,mFACA,mFAEF,6BACE,0EACA,sFACA,+LCtBK,WAAAf,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,4BAClB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,GAAGrB,IAAI,IAAIiB,KAAM,GACxC,6BACE,0DACA,mLAKF,6BACE,2DACA,uHAEF,6BACE,0DACA,0FAEF,6BACE,wGACA,wDACA,kDACA,8ECvBK,WAAAf,GACb,OACI,kBAAC,IAAD,CAAcgB,MAAM,4BAEnB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,oBAAUrB,IAAI,IAAIiB,KAAM,GAChD,+HACA,iDACA,2GACA,gGACA,0KAEF,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,iCAAQrB,IAAI,IAAIiB,KAAM,GAC7C,wGACA,oEACA,0EACA,qLACA,0JAEF,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,eAAKrB,IAAI,IAAIiB,KAAM,GAC5C,yBAAKZ,MAAO,CAACiB,MAAM,QAAnB,4sBCnBS,WAAApB,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,4BACpB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,2BAAOrB,IAAI,IAAIiB,KAAM,GAC3C,ubACA,4bACA,mTAEF,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,eAAKrB,IAAI,IAAIiB,KAAM,GAC5C,yBAAKZ,MAAO,CAACiB,MAAM,QAAnB,oICTU,WAAApB,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,mBACpB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,eAAKrB,IAAI,IAAIiB,KAAM,GAA5C,qOAIA,kBAAC,IAAalB,KAAd,CAAmBsB,MAAM,kBAAQrB,IAAI,IAAIiB,KAAM,GAC5C,iDACA,iDACA,6CCVQ,WAAAf,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,IAClB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,GAAGrB,IAAI,IAAIiB,KAAM,GACxC,iDACA,8BACA,6BACE,2CACA,0NAGA,mEACA,8dAMF,6BACE,6MACA,mICpBK,WAAAf,GACb,OACE,6BACE,6BACE,8DACA,2FACA,2EACA,4NAEF,8BAEA,6BACE,oEACA,uJACA,2BACE,+DAAwC,KAE1C,6BACE,+eAGA,6BACA,2BACE,8DAEF,6BARF,iLAWE,6BAXF,6OAa6C,Q,SC7B/CY,EAAO,CACT,qSACA,2LACA,2LACA,qQACA,wEAEW,WAAAZ,GACb,OACC,6BACK,wBAAIG,MAAO,CAAEG,OAAQ,WAArB,gGACJ,kBAAC,IAAD,CACEe,KAAK,QACLC,OAAQ,6BACJ,6CACA,4BACI,iJACA,uNACA,+MACA,gDAIRL,UAAQ,EACRM,WAAYX,EACZY,WAAY,SAAA5B,GAAI,OAAI,kBAAC,IAAKC,KAAN,KAAYD,QC1BvB,WAAAI,GACb,OACE,kBAAC,IAAD,CAAcgB,MAAM,qBACpB,kBAAC,IAAanB,KAAd,CAAmBsB,MAAM,GAAGrB,IAAI,IAAIiB,KAAM,GAC1C,6BACE,8EACA,6NAFF,KAEwE,6BACxE,iDACJ,qKACA,oGACA,6IACA,oHAAsB,6BACtB,uDACE,mIACA,+EACC,0CCSkBU,E,YACnB,aAAe,IAAD,8BACZ,+CAYFC,WAAa,SAAA5C,GACX6C,OAAOC,SAASC,KAAO/C,GAZvB,EAAKK,MAAQ,CACX2C,MAAOH,OAAOC,SAASC,KAAKE,MAAM,IAAM,aAG1CJ,OAAOK,aAAe,WACpB,EAAK/C,SAAS,CACZ6C,MAAOH,OAAOC,SAASC,KAAKE,MAAM,MAR1B,E,sEAkBZ,IAAIE,EAAM,GACV,OAAQ3C,KAAKH,MAAM2C,OACjB,IAAK,YACHG,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,gBACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,UACHA,EAAM,kBAACC,EAAD,MACN,MACF,IAAK,OACHD,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,YACHA,EAAM,kBAAC,EAAD,MACN,MACF,IAAK,eACHA,EAAM,kBAAC,EAAD,MACN,IAAK,YACDA,EAAM,kBAACE,EAAD,MACN,MACA,IAAK,cACLF,EAAM,kBAACG,EAAD,MACJ,MACJ,IAAK,YACHH,EAAM,kBAACI,EAAD,MACN,MACA,IAAK,OACLJ,EAAM,kBAAC,EAAD,MACJ,MACA,IAAK,QACLA,EAAM,kBAAC,EAAD,MACJ,MACA,IAAK,QACLA,EAAM,kBAAC,EAAD,MAGlB,OACE,kBAAC,IAAMK,SAAP,KACE,kBAAC,EAAD,CAAUrC,WAAYX,KAAKoC,YAEvBO,Q,GA7DuBvB,aCff6B,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ee7f5288.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\nconst { Header, Sider, Content } = Layout;\r\n// 左侧一级导航的数据\r\nconst leftNav = [\r\n  { iconType: 'solution', text: 'React概述', id: 'ReactBase' },\r\n  { iconType: 'video-camera', text: '组件类型', id: 'ComponentType' },\r\n  { iconType: 'video-camera', text: '全局安装与配置', id: 'Install' },\r\n  { iconType: 'read', text: 'cass使用', id: 'Cass' },\r\n  { iconType: 'save', text: '生命周期', id: 'LifeCycle' },\r\n  { iconType: 'switcher', text: 'props使用', id: 'PropsContent' },\r\n  { iconType: \"video-camera\", text: \"组建区别\", id: \"Classdiff\" },\r\n  { iconType: \"video-camera\", text: \"顶级API\", id: \"Toplevelapi\" },\r\n  { iconType: \"video-camera\", text: \"渲染原理\", id: \"Rendering\" },\r\n  { iconType: \"read\", text: \"事件写法与跨域使用\", id: \"Blog\" },\r\n  { iconType: \"video-camera\", text: \"jsconfig.json\", id: \"Route\" },\r\n  { iconType: \"book\", text: \"antd框架\", id: \"Frame\" },\r\n];\r\nexport default class Mylayout extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // 控制展开收起\r\n      collapsed: false\r\n    };\r\n  }\r\n  // 切换的方法\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n\r\n  render() {\r\n    /*\r\n    Layout:容器组件，包裹组件\r\n    Sider：侧边栏，放导航的\r\n    Header：头部组件\r\n    Menu：做折叠导航的组件\r\n    Content：内容展示组件【重要】\r\n    */\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            {leftNav.map(item => {\r\n              return (\r\n                <Menu.Item\r\n                  key={item.id}\r\n                  onClick={() => {\r\n                    this.props.getsoudata(item.id);\r\n                  }}\r\n                >\r\n                  <Icon type={item.iconType} />\r\n                  <span>{item.text}</span>\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280\r\n            }}\r\n          >\r\n            {/* 隐式渲染传递进来的组件 */}\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n// 引入卡片组件\r\nimport { Card, Col, Row } from \"antd\";\r\nimport data from \"./data.json\";\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <Row gutter={16}>\r\n        {data.reactBase.map((item, index) => {\r\n          return (\r\n            <Col span={8} key={index}>\r\n              <Card title={item.title} bordered={true}>\r\n                {item.content}\r\n              </Card>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"组件分类\">\r\n      <Descriptions.Item label=\"无状态组件\" key=\"1\" span={3}>\r\n        <p>定义：(箭头函数/函数)组件 不需要实例化 没有this只接收一个props</p>\r\n        <p>语法：export default props=>{}</p>\r\n        <p>优点：加载快,渲染快 不会产生额外的内存占用</p>\r\n        <p>缺点：功能单一,没有react其他特性 只有一个props可用</p>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"class组件\" key=\"2\" span={3}>\r\n      <p>定义：会被实例化,拥有this指向拥有react一切特性</p>\r\n        <p>语法：export default class Html extends React.Component</p>\r\n        <p>优点：功能强大,功能丰富,可扩展性强</p>\r\n        <p>缺点：渲染比无状态组件要慢,容易代码臃肿</p>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"高阶组件\" key=\"3\" span={3}>\r\n      <p>定义：高阶组件(HOC)是react中用于复用组件逻辑的一种高级技巧 不是API 是一种模式</p>\r\n        <p>语法：一个函数接收一个组件并返回一个class组件</p>\r\n        <p>使用:函数调用传入一个组件</p>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};","import React from 'react';\r\n// 引入描述列表组件\r\nimport { Descriptions } from 'antd';\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"脚手架安装与配置\">\r\n      <Descriptions.Item label=\"安装\" key=\"1\" span={3}>\r\n        <p>1:全局安装:npm install -g ceate-react-app</p>\r\n        <p>2:初始项目:create-react-app 项目名</p>\r\n        <p>\r\n          3:进入项目:npm start 直接运行开发环境 不需要我们在手动安装\r\n          node-module依赖,脚手架已经为我们安装好了\r\n        </p>\r\n        <p>npm run eject 可以解决哪些问题</p>\r\n        <p>\r\n          本地项目里的依赖和全局依赖包版本不一致导致的bug 可以使用此命令解决\r\n        </p>\r\n        <p>\r\n          注意:如果咱们的项目初始化的时候就是在git仓库里面的,那么我们在使用此命令的时候就会失败,控制台就会提示我们应该先储存代码到本地git仓库\r\n        </p>\r\n        <p>解决办法:要么删掉git本地仓库,要么提交到仓库才能正常使用此命令</p>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"cass使用\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>1.在已有项目下安装node-sass</h2>\r\n          <p>1:全局安装:npm i -D node-sass </p>\r\n        </div>\r\n        <div>\r\n          <h2>2.可以愉快地用了</h2>\r\n          <p>若要使用SASS MODULE，则需要将*.scss文件改为*.module.scss。</p>\r\n        </div>\r\n        <div>\r\n          <h1>\r\n            React提供的脚手架create-react-app创建的工程文件不像vue那种暴露出webpack来，所以添加依赖需要拐个弯。\r\n          </h1>\r\n          <h1>安装 sass-loader和node-sass依赖</h1>\r\n          <p>npm install sass-loader 和 node-sass --save-dev</p>\r\n        </div>\r\n        <div>\r\n          <h2>打开react的webpack配置</h2>\r\n          <p>node_modules/react-scripts/config/webpack.config.dev.js</p>\r\n          <p> 找到module下的rules，然后找到最后一个配置，修改成如下的样子</p>\r\n        </div>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"生命周期\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>1.挂载阶段</h2>\r\n          <div>\r\n            constructor【初始挂载】 render【渲染呈现】 componentDidMount\r\n            【渲染完成】\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2>2.更新阶段 </h2>\r\n          <div>render【渲染】 componentDidUpdate【更新完成】</div>\r\n        </div>\r\n        <div>\r\n          <h2>3.销毁阶段</h2>\r\n          <div>componentWillUnmount【准备卸载】</div>\r\n        </div>\r\n        <div>\r\n          <h2>触发更新阶段有那些途径：</h2>\r\n          <p>1.改变props值</p>\r\n          <p>2.state修改</p>\r\n          <p>3.强制更新：forceUpdate</p>\r\n        </div>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n      <Descriptions title=\"组件区别\">\r\n \r\n       <Descriptions.Item label=\"class组件\" key=\"1\" span={3}>\r\n        <p>有状态组件的区别是它属于一个class类,</p>\r\n        <p>有继承</p>\r\n        <p>可以通过this来接收状态和属性</p>\r\n        <p>如果你想用react的生命周期</p>\r\n        <p>想对一些数据进行增删改查的话就要用到有状态组件</p>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"无状态组件\" key=\"2\" span={3}>\r\n        <p>无状态组件是属于一个函数,</p>\r\n        <p>没有继承功能;</p>\r\n        <p>也没有生命周期,</p>\r\n        <p>他的动态数据都是通过父组件传值子组件通过props接收渲染,</p>\r\n        <p>针对一些简单的逻辑判断等等,选 用无状态组件</p>\r\n      </Descriptions.Item>\r\n      <Descriptions.Item label=\"注意\" key=\"3\" span={3}>\r\n      <div style={{color:'red'}}>大部分建议使用无状态组件,因为如果大量用有状态的组件容易触发生命周期和钩子函数,页面会出面加载慢等问题,\r\n\r\n什么时候用有状态组件?\r\n\r\n在不确定或者确定要用到数据增删改查模块就可以 \r\n\r\n在需要管理状态,或者需要使用生命周期时再用\r\n 原文章地址：https://blog.csdn.net/qq_40190624/article/details/88782811\r\n</div>\r\n      </Descriptions.Item>\r\n     \r\n    </Descriptions>\r\n\r\n    \r\n  );\r\n};","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"渲染原理\">\r\n    <Descriptions.Item label=\"渲染原理\" key=\"1\" span={3}>\r\n       <p>React类 是 React库的入口，如果通过标签加载 React，将会在全局获取该库。如果使用 ES6 npm 加载可以通过 import React from 'react' 引入，如果使用 ES5 npm 加载可以通过 var React = require('react') 引入</p>\r\n       <p>React组件 可以将 UI分割成独立的、可重用的部分，并单独考虑每一件。React组件可以通过子类  React.Component 或 React.PureComponent 进行定义。如果不使用 ES6，可以使用 create-react-class 模块代替</p>\r\n       <p>推荐使用 JSX 来描述 UI 界面，每一个  JSX 元素都是调用 React.createElement() 语法糖，这样就不必直接使用 createElement() createFactory() 方法</p>\r\n     </Descriptions.Item>\r\n     <Descriptions.Item label=\"声明\" key=\"1\" span={3}>\r\n     <div style={{color:'red'}}>\r\n        文章有所借鉴 \r\n        原文地址：https://blog.csdn.net/chenshun123/article/details/78999223\r\n     </div>\r\n     </Descriptions.Item>\r\n      \r\n    </Descriptions>\r\n  );\r\n};","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"顶级API\">\r\n    <Descriptions.Item label=\"定义\" key=\"1\" span={3}>\r\n      凡是挂载到React和ReactDom上的方法和属性都叫做顶级API\r\n      React.createElement：创建的虚拟DOM，接受三个参数\r\n    </Descriptions.Item>\r\n    <Descriptions.Item label=\"顶级API\" key=\"1\" span={3}>\r\n       <p>React.creatElement</p>\r\n       <p>React.cloneElement</p>\r\n       <p>React.child</p>\r\n    </Descriptions.Item>   \r\n      \r\n    </Descriptions>\r\n  );\r\n};","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <h2>props使用</h2>\r\n        <div></div>\r\n        <div>\r\n          <h1>props：</h1>\r\n          <span>\r\n            在react里面叫属性，父组件传递给子组件上所有的属性都会在props里面拿到\r\n          </span>\r\n          <h1>props类型是对象</h1>\r\n          <div>\r\n            state 和 props 主要的区别在于 props 是不可变的，而 state\r\n            可以根据与用户交互来改变。这就是为什么有些容器组件需要定义 state\r\n            来更新和修改数据。 而子组件只能通过 props 来传递数据。\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h1>props只能由父组件去修改，子组件时无法修改父组件传递进来的属性</h1>\r\n          <h1>props更新后也会触发子组件的更新阶段</h1>\r\n        </div>\r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\n\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <b>事件的写法:</b>\r\n        <p>1.直接用bind（）方法绑定</p>\r\n        <p>2.用箭头函数绑定</p>\r\n        <p>3.构造器内声明，优点为仅需要一次绑定，不需要每次调用去执行绑定。</p>\r\n      </div>\r\n      <div></div>\r\n\r\n      <div>\r\n        <h3>跨域的使用：</h3>\r\n        <p>通过proxy解决跨域问题，可以直接在package.json下配置:</p>\r\n        <p>\r\n          <b>1.\"proxy\": \"http://api.xxxx.com\"</b>{\" \"}\r\n        </p>\r\n        <div>\r\n          <p>\r\n            实际开发中，打包后上传到同域名路径就ok了，不需要设置webpack代理的，这时候我们在打包的时候就需要在package.json配置中关闭刚才设置的proxy，挺麻烦的，难免打包的时候忘记屏蔽掉。\r\n          </p>\r\n          <br />\r\n          <b>\r\n            <i>解决方法：</i>\r\n          </b>\r\n          <br />\r\n          1.你也可以使用 create-react-app 提供的 yarn run eject\r\n          命令将所有内建的配置暴露出来\r\n          <br />\r\n          2.修改webpackDevServer.config.js文件添加 注意：yarn run\r\n          eject可能导致项目跑不起来，这时候执行yarn 或者 npm install即可{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { List, Typography } from 'antd';\r\n\r\nconst data = [\r\n    '①.通过在项目的根目录中配置jsconfig.json或tsconfig.json文件来完成。如果你在项目中使用TypeScript，则你将拥有一个tsconfig.json文件。',\r\n    '②.如果你使用的是TypeScript，则可以在项目文件中配置baseUrl设置。compilerOptionstsconfig.json',\r\n    '③.如果你使用的是TypeScript，则可以在项目文件中配置baseUrl设置。compilerOptionstsconfig.json',\r\n    '④现在您已将项目配置为支持绝对导入，如果要导入位于的模块src/components/Button.js，可以像这样导入模块：',\r\n    '④.①引入：import Button from components/Button;',\r\n  ];\r\nexport default props => {\r\n  return (\r\n   <div>\r\n        <h3 style={{ margin: '16px 0' }}>jsconfig.json:配置组件引入时使用绝对路径</h3>\r\n    <List\r\n      size=\"large\"\r\n      header={<div>\r\n          <h2>好处:</h2>\r\n          <ul>\r\n              <li>1.输入路径更加容易, 不再需要 ../../../../地狱模式</li>\r\n              <li>2.你可以复制/粘贴代码包括导入到其他文件中，而不需要修改引用路径</li>\r\n              <li>3.你可以移动文件而不需要更新引用路径(假如你的IDE没有帮你这么做)</li>\r\n              <li>4.简洁</li>\r\n          </ul>\r\n      </div>}\r\n      \r\n      bordered\r\n      dataSource={data}\r\n      renderItem={item => <List.Item>{item}</List.Item>}\r\n    />\r\n   </div>\r\n  );\r\n};\r\n ","import React from \"react\";\r\n// 引入描述列表组件\r\nimport { Descriptions } from \"antd\";\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"antd框架:\">\r\n    <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n    <div>\r\n      <h3>网址： https://ant.design/index-cn</h3>\r\n      <h2>antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</h2> </div><br/>\r\n    <b>特性：</b>\r\n<p>1:提炼自企业级中后台产品的交互语言和视觉风格。</p>\r\n<p>2:开箱即用的高质量 React 组件</p>\r\n<p>3:使用 TypeScript 构建，提供完整的类型定义文件</p>\r\n<p>4：全链路开发和设计工具体系。</p><br/>\r\n<b>支持环境</b> \r\n  <p> 现代浏览器和 IE9 及以上（需要 polyfills）。</p>\r\n  <p>支持服务端渲染。</p> \r\n   <p>Electron</p> \r\n</Descriptions.Item>\r\n      \r\n    </Descriptions>\r\n  );\r\n};","import React, { Component } from 'react';\r\nimport Mylayout from './Layout/index';\r\n// 引入react基础概述\r\nimport ReactBase from './ReacrtBase/index';\r\n// react组件分类\r\nimport ComponentType from './componentType/index';\r\n// 全局安装脚手架\r\nimport Install from './Install/index';\r\n//cass使用\r\nimport Cass from './Cass-Z/index';\r\n//生命周期\r\nimport LifeCycle from './LifeCycle-Z/';\r\n//props怎么控制组件的显示内容\r\nimport Classdiff from './Classdiff/Classdiff';\r\n//组件的区别\r\nimport Rendering from './Rendering/Rendering';\r\n//渲染原理\r\nimport Toplevelapi from './Toplevelapi/Toplevelapi'\r\n//顶级API\r\nimport PropsContent from './PropsContent-Z/';\r\n//事件的写法与跨域的使用\r\nimport Blog from './blog/index';\r\n//jsconfig.json\r\nimport Route from './route/index';\r\n//antd框架\r\nimport Frame from './frame/frames'\r\n\r\nexport default class Index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'ReactBase'\r\n    };\r\n\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n  // 收听子组件传递数据\r\n  getSouData = id => {\r\n    window.location.hash = id;\r\n  };\r\n  // 渲染函数\r\n  render() {\r\n    let Dom = '';\r\n    switch (this.state.isCom) {\r\n      case 'ReactBase':\r\n        Dom = <ReactBase />;\r\n        break;\r\n      case 'ComponentType':\r\n        Dom = <ComponentType />;\r\n        break;\r\n      case 'Install':\r\n        Dom = <Install />;\r\n        break;\r\n      case 'Cass':\r\n        Dom = <Cass />;\r\n        break;\r\n      case 'LifeCycle':\r\n        Dom = <LifeCycle />;\r\n        break;\r\n      case 'PropsContent':\r\n        Dom = <PropsContent />;\r\n        case 'Classdiff':\r\n            Dom = <Classdiff/>;\r\n            break;\r\n            case 'Toplevelapi':\r\n            Dom = <Toplevelapi/>;\r\n              break;\r\n          case 'Rendering':\r\n            Dom = <Rendering/>;\r\n            break;\r\n            case 'Blog':\r\n            Dom = <Blog/>;\r\n              break;\r\n              case 'Route':\r\n              Dom = <Route/>;\r\n                break;\r\n                case 'Frame':\r\n                Dom = <Frame/>;\r\n                  break;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <Mylayout getsoudata={this.getSouData}>\r\n          {\r\n            Dom\r\n            // this.state.isCom === 'ReactBase' ? <ReactBase/> :\r\n            // this.state.isCom === 'ComponentType' ? <ComponentType/>\r\n          }\r\n        </Mylayout>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// 引入核心依赖库React\nimport React from \"react\";\n// 引入核心依赖ReactDOM他是基于react的所以必须在react依赖的下面引入\nimport ReactDOM from \"react-dom\";\n// 自己写的全局样式\nimport \"./asets/index.css\";\n// 引入antd样式\nimport \"antd/dist/antd.css\";\n// 引入一个组件\nimport App from \"./components/index\";\n// 引入离线缓存代码\nimport * as serviceWorker from \"./serviceWorker\";\n// 使用ReactDOM渲染组件并挂载到根元素上\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// 离线缓存\nserviceWorker.unregister();\n"],"sourceRoot":""}